
networkPolicy:
  enabled: true


enabled: true
local: true
labels:
  service: datagrok
cfg_pvc:
  name: cfg
  accessModes: ReadWriteOnce
  storage: 1Gi 
data_pvc:
  name: data
  accessModes: ReadWriteOnce
  storage: 1Gi
replicas: 1
revisionHistoryLimit: 10
strategy_type: RollingUpdate
container:
  name: datagrok
  image: datagrok/datagrok
  tag: 1.19.2
  port: 8080
service:
  type: ClusterIP
grok_parameters:
  deployDemo: false
  dbServer: "database"
  dbPort: 5432
  db: "datagrok"
  dbAdminLogin: "superuser"
  dbAdminPassword: "WaebwkeBVym11JkNtX6LDuu1dUQEcZGYgVv6"
  dbLogin: "dg"
  dbPassword: "dg"
  adminPassword: "admin"
  adminDevKey: "admin"
isolatesCount: 2
  
livenessProbe:
  httpGet:
    path: /api/admin/health
    port: 8080
  failureThreshold: 3
  timeoutSeconds: 10
  periodSeconds: 20 # default
readinessProbe:
  httpGet:
    path: /api/admin/health
    port: 8080
  failureThreshold: 3
  timeoutSeconds: 10
  periodSeconds: 20
startupProbe:
  httpGet:
    path: /api/admin/health
    port: 8080
  failureThreshold: 90
  periodSeconds: 30
ingress:
  enabled: true
  ingressClassName: nginx
  annotations: {}
  tls: {}
  local:
    enabled: true
    hosts:
      - host: datagrok.internal
        paths:
        - path: /
          backend:
            serviceName: datagrok-service
            servicePort: http
  hosts:
    - host: datagrok.ai
      paths:
        - path: /
          backend:
            serviceName: datagrok-service
            servicePort: http
database:
  enabled: true
  name: database
  configmap:
    POSTGRES_DB: "postgres"
    POSTGRES_USER: "superuser"
    POSTGRES_PASSWORD: "WaebwkeBVym11JkNtX6LDuu1dUQEcZGYgVv6"
  service:
    type: ClusterIP
  statefulset:
    minReadySeconds: 10
    replicas: 1
    pod:
      annotations: 
        asd: asd
      labels: 
        service: db
      terminationGracePeriodSeconds: 10
      container:
        name: database
        image: postgres
        imagePullPolicy: Always
        tag: 12
        port: 5432
        volume:
          path: /data
  volumeClaimTemplates:
    name: db-data
    accessMode: [ "ReadWriteOnce" ]
    storageClassName: standard
    storage: 1Gi


datagrok_grok_connect:
  enabled: true
  restartPolicy: Always
  labels:
    service: grok-connect
  strategy_type: RollingUpdate
  container:
    name: grok-connect
    image: datagrok/grok_connect
    tag: 2.1.11
    port: 1234
  service:
    type: ClusterIP
  livenessProbe:
    httpGet:
      path: /health
      port: 1234
    failureThreshold: 3
    timeoutSeconds: 10
    periodSeconds: 20 # default
  readinessProbe:
    httpGet:
      path: /health
      port: 1234
    failureThreshold: 3
    timeoutSeconds: 10
    periodSeconds: 20
  startupProbe:
    httpGet:
      path: /health
      port: 1234
    failureThreshold: 90
    periodSeconds: 30

datagrok_jkg:
  enabled: false
  restartPolicy: Always
  labels:
    service: jkg
  strategy_type: RollingUpdate
  container:
    name: jkg
    image: datagrok/jupyter_kernel_gateway
    tag: latest
    ports:
      jupyter: 
        name: jupyter
        port: 8888
      helper: 
        name: helper
        port: 5005
  service:
    type: ClusterIP
  livenessProbe:
    httpGet:
      path: /jupyter/helper/info
      port: 5005
    failureThreshold: 3
    timeoutSeconds: 10
    periodSeconds: 20 # default
  readinessProbe:
    httpGet:
      path: /jupyter/helper/info
      port: 5005
    failureThreshold: 3
    timeoutSeconds: 10
    periodSeconds: 20
  startupProbe:
    httpGet:
      path: /jupyter/helper/info
      port: 5005
    failureThreshold: 90
    periodSeconds: 30
  grok_parameters:
    dbServer: "database"
    dbPort: "5432"
    db: "datagrok"
    dbLogin: "dg"
    dbPassword: "dg"
    isolatesCount: 1
    deployDemo: false
    deployTestDemo: false
    datlasApiUrl: "http://datagrok:8082"
    jupyterToken: "4b8ed936cf61a1c5e37a8b3a845599941c272de6e29330a0"
    capabilities: 
      - "jupyter"

datagrok_jupyter_notebook:
  enabled: false
  restartPolicy: Always
  labels:
    service: jupyter-notebook
  strategy_type: RollingUpdate
  container:
    name: jupyter-notebook
    image: datagrok/jupyter_notebook
    tag: latest
    ports:
      notebook: 
        name: notebook
        port: 8889
      helper: 
        name: helper
        port: 5005
  service:
    type: ClusterIP
  livenessProbe:
    httpGet:
      path: /notebook/helper/info
      port: 5005
    failureThreshold: 3
    timeoutSeconds: 10
    periodSeconds: 20 # default
  readinessProbe:
    httpGet:
      path: /notebook/helper/info
      port: 5005
    failureThreshold: 3
    timeoutSeconds: 10
    periodSeconds: 20
  startupProbe:
    httpGet:
      path: /notebook/helper/info
      port: 5005
    failureThreshold: 90
    periodSeconds: 30

datagrok_grok_spawner:
  enabled: true
  restartPolicy: Always
  labels:
    service: grok-spawner
  strategy_type: RollingUpdate
  container:
    name: grok-spawner
    image: datagrok/grok_spawner
    tag: latest
    port: 8000
    imagePullPolicy: Always
  service:
    type: ClusterIP
  livenessProbe:
    httpGet:
      path: /info
      port: 8000
    failureThreshold: 3
    timeoutSeconds: 10
    periodSeconds: 20 # default
  readinessProbe:
    httpGet:
      path: /info
      port: 8000
    failureThreshold: 3
    timeoutSeconds: 10
    periodSeconds: 20
  startupProbe:
    httpGet:
      path: /info
      port: 8000
    failureThreshold: 90
    periodSeconds: 30
  secrets:
    registry:
      dockerconfigjson: '{"auths": {"docker-registry.datagrok.ai": {"auth": "YWRtaW46ZGF0YWdyb2s=", "username": "admin", "password": "datagrok"}}}'
      configjson: '{"auths": {"registry.minikube:80": {"auth": "YWRtaW46ZGF0YWdyb2s="}}}'
    minio:
      accesKey: datagrok
      secretKey: rZmZ8hFNMs
      api: http://minio.dev-minio.svc.cluster.local:9000
  env:
    GROK_SPAWNER_ENVIRONMENT: kubernetes
    GROK_SPAWNER_CONFIGURATION: configuration.yaml




# mount secret as a volume
#mountSecrets:
#  secret_name: mount_path
